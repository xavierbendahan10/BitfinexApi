{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst defaultPrice = {\n  user_id: -1,\n  nickname: \"undefined\",\n  value: 0\n};\nexport const bestpricesSlice = createSlice({\n  name: 'prices',\n  // para identificar el slice dentro del store    \n  initialState: {\n    // estado inicial del slice \n    price: defaultPrice\n  },\n  // funciones reduce del slice que definen como se actualiza el estado \n  // aca se puede usar logica mutable pero detras de escena redux hace logica inmutable\n  reducers: {\n    savePrice: (state, action) => {\n      state.price = action.payload;\n    },\n    reset_price: state => {\n      state.price = defaultPrice;\n    }\n  }\n}); // importante para poder usar los reducers dentro de las interfaces\n\nexport const {\n  savePrice,\n  reset_price\n} = bestpricesSlice.actions; // importante para acoplar este reduce al store principal\n\nexport default bestpricesSlice.reducer;","map":{"version":3,"sources":["C:/Users/xavier/challengeVick/Front/src/redux/reducers/bestpriceSlice.js"],"names":["createSlice","defaultPrice","user_id","nickname","value","bestpricesSlice","name","initialState","price","reducers","savePrice","state","action","payload","reset_price","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,YAAY,GAAG;AACpBC,EAAAA,OAAO,EAAE,CAAC,CADU;AAEpBC,EAAAA,QAAQ,EAAE,WAFU;AAGpBC,EAAAA,KAAK,EAAG;AAHY,CAArB;AAMA,OAAO,MAAMC,eAAe,GAAGL,WAAW,CAAE;AACxCM,EAAAA,IAAI,EAAE,QADkC;AACxB;AAChBC,EAAAA,YAAY,EAAE;AAAI;AACdC,IAAAA,KAAK,EAAEP;AADG,GAF0B;AAKxC;AACA;AACAQ,EAAAA,QAAQ,EAAE;AACNC,IAAAA,SAAS,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC1BD,MAAAA,KAAK,CAACH,KAAN,GAAcI,MAAM,CAACC,OAArB;AACH,KAHK;AAINC,IAAAA,WAAW,EAAGH,KAAD,IAAW;AACpBA,MAAAA,KAAK,CAACH,KAAN,GAAcP,YAAd;AACH;AANK;AAP8B,CAAF,CAAnC,C,CAiBP;;AACA,OAAO,MAAM;AAAES,EAAAA,SAAF;AAAaI,EAAAA;AAAb,IAA6BT,eAAe,CAACU,OAAnD,C,CACP;;AACA,eAAeV,eAAe,CAACW,OAA/B","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst defaultPrice = {\r\n user_id: -1,\r\n nickname: \"undefined\",\r\n value : 0\r\n}\r\n\r\nexport const bestpricesSlice = createSlice ({\r\n    name: 'prices', // para identificar el slice dentro del store    \r\n    initialState: {   // estado inicial del slice \r\n        price: defaultPrice,\r\n    },\r\n    // funciones reduce del slice que definen como se actualiza el estado \r\n    // aca se puede usar logica mutable pero detras de escena redux hace logica inmutable\r\n    reducers: {         \r\n        savePrice: (state, action) => {\r\n            state.price = action.payload\r\n        },\r\n        reset_price: (state) => {\r\n            state.price = defaultPrice\r\n        }\r\n    },\r\n});\r\n\r\n// importante para poder usar los reducers dentro de las interfaces\r\nexport const { savePrice, reset_price } = bestpricesSlice.actions\r\n// importante para acoplar este reduce al store principal\r\nexport default bestpricesSlice.reducer\r\n"]},"metadata":{},"sourceType":"module"}