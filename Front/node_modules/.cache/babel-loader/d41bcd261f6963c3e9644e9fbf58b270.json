{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst defaultCoin = {\n  nickname: \"undefined\",\n  type: 0,\n  value: 0\n};\nexport const tradesSlice = createSlice({\n  name: 'trade',\n  // para identificar el slice dentro del store    \n  initialState: {\n    // estado inicial del slice \n    coin: defaultCoin\n  },\n  // funciones reduce del slice que definen como se actualiza el estado \n  // aca se puede usar logica mutable pero detras de escena redux hace logica inmutable\n  reducers: {\n    search: (state, action) => {\n      state.coin = action.payload;\n    },\n    reset_trade: state => {\n      state.coin = defaultCoin;\n    }\n  }\n}); // importante para poder usar los reducers dentro de las interfaces\n\nexport const {\n  search,\n  reset_trade\n} = tradesSlice.actions; // importante para acoplar este reduce al store principal\n\nexport default tradesSlice.reducer;","map":{"version":3,"sources":["C:/Users/xavier/BitfinexApi/Front/src/redux/reducers/tradeSlice.js"],"names":["createSlice","defaultCoin","nickname","type","value","tradesSlice","name","initialState","coin","reducers","search","state","action","payload","reset_trade","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,WAAW,GAAG;AACnBC,EAAAA,QAAQ,EAAE,WADS;AAEnBC,EAAAA,IAAI,EAAG,CAFY;AAGnBC,EAAAA,KAAK,EAAG;AAHW,CAApB;AAMA,OAAO,MAAMC,WAAW,GAAGL,WAAW,CAAE;AACpCM,EAAAA,IAAI,EAAE,OAD8B;AACrB;AACfC,EAAAA,YAAY,EAAE;AAAI;AACdC,IAAAA,IAAI,EAAEP;AADI,GAFsB;AAKpC;AACA;AACAQ,EAAAA,QAAQ,EAAE;AACNC,IAAAA,MAAM,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACvBD,MAAAA,KAAK,CAACH,IAAN,GAAaI,MAAM,CAACC,OAApB;AACH,KAHK;AAINC,IAAAA,WAAW,EAAGH,KAAD,IAAW;AACpBA,MAAAA,KAAK,CAACH,IAAN,GAAaP,WAAb;AACH;AANK;AAP0B,CAAF,CAA/B,C,CAiBP;;AACA,OAAO,MAAM;AAAES,EAAAA,MAAF;AAAUI,EAAAA;AAAV,IAA0BT,WAAW,CAACU,OAA5C,C,CACP;;AACA,eAAeV,WAAW,CAACW,OAA3B","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst defaultCoin = {\r\n nickname: \"undefined\",\r\n type : 0 ,\r\n value : 0\r\n}\r\n\r\nexport const tradesSlice = createSlice ({\r\n    name: 'trade', // para identificar el slice dentro del store    \r\n    initialState: {   // estado inicial del slice \r\n        coin: defaultCoin,\r\n    },\r\n    // funciones reduce del slice que definen como se actualiza el estado \r\n    // aca se puede usar logica mutable pero detras de escena redux hace logica inmutable\r\n    reducers: {         \r\n        search: (state, action) => {\r\n            state.coin = action.payload\r\n        },\r\n        reset_trade: (state) => {\r\n            state.coin = defaultCoin\r\n        }\r\n    },\r\n});\r\n\r\n// importante para poder usar los reducers dentro de las interfaces\r\nexport const { search, reset_trade } = tradesSlice.actions\r\n// importante para acoplar este reduce al store principal\r\nexport default tradesSlice.reducer\r\n"]},"metadata":{},"sourceType":"module"}